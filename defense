'''
The goal of this is to give expected points for a defense in fantasy football. I will be doing this
by simulating various elements of a game and combining the probabilities to get a final result. 
Elements listed below:

Points - scrape line and over/under, run a poisson distribution, 
convert the poisson to expected points scored and the expected points scored to FF points

Yards - scrape yds/g from offense and yd/gm from defense, normalize for home team, run a poisson distribution
convert poisson to expected points scored and expected points scores to FF points

Sacks - scrape sacks/gm offense and defense, normalize for home team, run a poisson and convert to FF points

Fumbles - assume 1.2/game with only 50% being recovered and convert to points

Interceptions - based off of defenseive ints and QB int rate, run poisson and convert to FF points

D/ST touchdowns - ignore for now

TODO
-create scraper for 2022
-play with home/away adjustments for sacks/yards/turnovers/points
-play with adjustment for 2021 into 2021 (how much 2021 data do we use to model vs. 2022 data)
-model safeties
-model D/ST TDs

'''
#scraping

#scraping betting data

#api key and f strings to call a response from the API
api_key = '092d76719032c6c95ca51b49e81dc378'

response = requests.get(f" https://api.the-odds-api.com/v4/sports/americanfootball_nfl/odds/?apiKey={api_key}&regions=us&markets=spreads,totals&oddsFormat=american")

# Check the status code to make sure the request was successful
if response.status_code == 200:
  # The request was successful, so parse the response data
  data = response.json()
  print(data)
else:
  # There was an error with the request
  print("Error:", response.status_code)



betting_data =[]

for i in range(0,16):
  row = []
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][1]['outcomes'][0]['point'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['point'])
  row.append('away')
  betting_data.append(row)
  row = []
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][1]['outcomes'][1]['point'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['point'])
  row.append('home')
  betting_data.append(row)

#creating dataframe
df_bet = pd.DataFrame(betting_data, columns = ['Team','O/U','Spread','Home/Away'])

#renaming teams to 3 letter abbreviation
df_bet['Team'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)

#creating df with teams/opponents
schedule = []
for i in range(0,16):
  row=[]
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['name'])
  schedule.append(row)

df1 = pd.DataFrame(schedule, columns=['Team','Opponent'])
df2 = pd.DataFrame({'Team': df1['Opponent'], 'Opponent':df1['Team']})

df_schedule = pd.concat([df1, df2])
df_schedule = df_schedule.reset_index(drop=True)

#team names to abbreviations
df_schedule['Team'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)
df_schedule['Opponent'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)

#scraping in season stats with nfl fast py

#data gathering, year on first line, thru week on second line
df = nfl.import_pbp_data([2022])
df = df.loc[df['week']<=15]

#filtering data columns to relevent columns for this script
df = df[['game_id','posteam','defteam','yards_gained','sack','passer','interception']]

#data munging
offensive_df = df.groupby(['game_id', 'posteam']).sum().groupby(['posteam']).sum()

#calc number of games played
count_df = df.groupby(['game_id', 'posteam']).sum().groupby(['posteam']).count()
count_df.drop(labels = ['yards_gained', 'interception'], axis=1, inplace=True)
count_df.rename(columns={'sack':'games'}, inplace=True)
column = count_df['games']
offensive_df = offensive_df.assign(games=column)

#resetting index and renaming for a merge with betting data
offensive_df.reset_index(inplace=True)
offensive_df = offensive_df.rename(columns={'posteam':'Opponent'})

#defensive data scraping and munging
defensive_df = df.groupby(['game_id', 'defteam']).sum().groupby(['defteam']).sum()
defensive_df.reset_index(inplace=True)
defensive_df = defensive_df.rename(columns={'yards_gained':'def_yards_gained', 'sack':'def_sack', 'interception': 'def_interception', 'defteam':'Team'})

#merging disparate dataframes into one
df_final = pd.merge(df_schedule, df_bet, on=['Team'], how='inner')
df_final = pd.merge(df_final, defensive_df, on=['Team'], how='inner')
df_final = pd.merge(df_final, offensive_df, on=['Opponent'], how='inner')

#translating season stats into per game stats
def divide_by_games(col):
  return col.div(df_final['games'])

df_final[['yards_gained','sack', 'interception', 'def_yards_gained', 'def_sack', 'def_interception']] = \
df_final[['yards_gained','sack', 'interception', 'def_yards_gained', 'def_sack', 'def_interception']].apply(divide_by_games)

##functions

#points, takes expected points allowed, uses a dictionary with point values allowed and corresponding fantasy points, uses a poisson distribution to get points allowed
#and converts to an expected points value

def points_points(expected_points):
    #dictionary
    points_dict = {
    5: [0,1],
    4: [1,7],
    3: [7,14],
    1: [14,18],
    0: [18,27],
    -1: [27,35],
    -3: [35,46],
    -5:[46,50]}  
    #set output to 0
    final_points_points = 0
    #iterate through scoring dictionary
    for key, value in points_dict.items():
      #iterate through values stored in scoreing dictionary
      for i in range(value[0],value[1]):
        #add the probability of a score multiplied by the fantasy points you would get
        final_points_points += (key * poisson.pmf(i, expected_points))
    return(final_points_points)

#yards

def yards_points(expected_yards):
    yards_dictionary = {
    5: [0,100],
    3: [101,199],
    2: [200,299],
    0: [300,349],
    -1: [350,399],
    -3: [400,449],
    -5:[450,499],
    -6:[500,549],
    -7:[550,800]}
    #set output to 0
    final_yards_points = 0
    #iterate through scoring dictionary
    for key, value in yards_dictionary.items():
        #iterate through values stored in scoreing dictionary
        for i in range(value[0],value[1]):
            #add the probability of a score multiplied by the fantasy points you would get
           final_yards_points += (key * poisson.pmf(i, expected_yards))
    return(final_yards_points)
    
#sacks

#create a function that given sacks by defense and sacks allowed by opponent, gives expecte points from sacks
def sack_points(defensive_average, opp_offensive_average):
    final_sack_points = 0
    average_sacks = (defensive_average + opp_offensive_average)/2
    for i in range(0,11):
        final_sack_points += (i*poisson.pmf(i, average_sacks))
    return(final_sack_points)

#Ints

#create a function that given ints by defense and ints thrown by opponent, gives expecte points from ints
def int_points(defensive_average, opp_qb_average):
    final_int_points = 0
    average_ints = (defensive_average + opp_qb_average)/2
    for i in range(0,7):
        final_int_points += 2*(i*poisson.pmf(i, average_ints))
    return(final_int_points)
    
#fumbles

#create a function given average fumbles per game gives expected points from fumbles
def fumble_points(fumbles):
    final_fumble_points = 0
    average_fumbles = fumbles
    average_fumbles_lost = fumbles/2
    for i in range(0,7):
        final_fumble_points += 2*(i*poisson.pmf(i, average_fumbles_lost))
    return(final_fumble_points)

## Points

#data wrangling for points and pipeline for cleaning data from https://bettingdata.com/nfl/odds to a dataframe we can work with
df_favorite = pd.read_excel('C:/Users/samdk/Desktop/data science/nfl/dstream/2022_week1.xlsx')
df_favorite.rename(columns = {'Favorite':'Team', 'Underdog':'Opponent'}, inplace=True)

#instantiate underdog data frame, pull the underdog teams from favorite, convert spread to underdog and append underdog to favority to create df with all teams
df_underdog = pd.DataFrame()
df_underdog['Team'] = df_favorite['Opponent']
df_underdog['Opponent'] = df_favorite['Team']
df_underdog['Spread'] = df_favorite['Spread']*-1
df_underdog['Total'] = df_favorite['Total']
df_final = df_favorite.append(df_underdog)

#generate expected score from line and o/u, remove 'at' from team/opponent and create a column for home team
df_final['Expected Score'] = (df_final['Total']+df_final['Spread'])/2
df_final['Opponent'] = df_final['Opponent'].str.replace('at ','')
df_final["Home"] = df_final["Team"].map(lambda x: 1 if "at " in x else '0')
df_final['Team'] = df_final['Team'].str.replace('at ','')
df_final = df_final.reset_index(drop=True)

#pipeline for adding yards/ints/sacks off/opponent
df_2021 = pd.read_excel('C:/Users/samdk/Desktop/data science/nfl/dstream/2021_offense.xlsx')
df_2021.drop(['Unnamed: 0', 'yards_o', 'int_o', 'Sacks_o', 'yards_d', 'sacks_d', 'int_d'], axis=1, inplace=True)
df_2021.rename(columns = {'TEAM':'Team'}, inplace=True)
sorted_df = df_final.sort_values(by='Team', ascending=True)
df_final = pd.merge(sorted_df, df_2021[['Team','yg_d','intg_d','sacksg_d']], on='Team')
df_2021.rename(columns = {'Team':'Opponent'}, inplace=True)
df_final = pd.merge(df_final, df_2021[['Opponent','yg_o','intg_o','sacksg_o']], on='Opponent')

#pipeline for applying functions to dictionary and getting final point total for ind. aspects of defenseive scoring
df = df_final
df['points_points'] = df.apply(lambda x: points_points(x['Expected Score']), axis=1)
df['yards_points'] = df.apply(lambda x: yards_points(x['yg_d'], x['yg_o']), axis=1)
df['sack_points'] = df.apply(lambda x: sack_points(x['sacksg_d'], x['sacksg_o']), axis=1)
df['int_points'] = df.apply(lambda x: int_points(x['intg_d'], x['intg_o']), axis=1)
df['fumble_points'] = df.apply(lambda x: fumble_points(1.1), axis=1)

#combine all the expected points into total
df['total_points'] = df.apply(lambda x: (x['points_points']+x['int_points']+x['yards_points']+x['sack_points']+x['fumble_points']), axis=1)
df_x = df[['Team', 'total_points']]


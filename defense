
#package install
%pip install nfl_data_py --upgrade

## the packages needed for this
import numpy as np
import pandas as pd
from scipy.stats import poisson
import matplotlib.pyplot as plt
import requests
import nfl_data_py as nfl


#scraping

#scraping betting data
'''
#api key and f strings to call a response from the API
api_key = 'xxxx'

response = requests.get(f" https://api.the-odds-api.com/v4/sports/americanfootball_nfl/odds/?apiKey={api_key}&regions=us&markets=spreads,totals&oddsFormat=american")

# Check the status code to make sure the request was successful
if response.status_code == 200:
  # The request was successful, so parse the response data
  data = response.json()
  print(data)
else:
  # There was an error with the request
  print("Error:", response.status_code)
'''


betting_data =[]

for i in range(0,16):
  row = []
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][1]['outcomes'][0]['point'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['point'])
  row.append('away')
  betting_data.append(row)
  row = []
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][1]['outcomes'][1]['point'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['point'])
  row.append('home')
  betting_data.append(row)

#creating dataframe
df_bet = pd.DataFrame(betting_data, columns = ['Team','O/U','Spread','Home/Away'])

#renaming teams to 3 letter abbreviation
df_bet['Team'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)

#creating df with teams/opponents
schedule = []
for i in range(0,16):
  row=[]
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['name'])
  schedule.append(row)

df1 = pd.DataFrame(schedule, columns=['Team','Opponent'])
df2 = pd.DataFrame({'Team': df1['Opponent'], 'Opponent':df1['Team']})

df_schedule = pd.concat([df1, df2])
df_schedule = df_schedule.reset_index(drop=True)

#team names to abbreviations
df_schedule['Team'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)
df_schedule['Opponent'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)

#scraping in season stats with nfl fast py

#data gathering, year on first line, thru week on second line
df = nfl.import_pbp_data([2022])
df = df.loc[df['week']<=15]

#filtering data columns to relevent columns for this script
df = df[['game_id','posteam','defteam','yards_gained','sack','passer','interception']]

#data munging
offensive_df = df.groupby(['game_id', 'posteam']).sum().groupby(['posteam']).sum()

#calc number of games played
count_df = df.groupby(['game_id', 'posteam']).sum().groupby(['posteam']).count()
count_df.drop(labels = ['yards_gained', 'interception'], axis=1, inplace=True)
count_df.rename(columns={'sack':'games'}, inplace=True)
column = count_df['games']
offensive_df = offensive_df.assign(games=column)

#resetting index and renaming for a merge with betting data
offensive_df.reset_index(inplace=True)
offensive_df = offensive_df.rename(columns={'posteam':'Opponent'})

#defensive data scraping and munging
defensive_df = df.groupby(['game_id', 'defteam']).sum().groupby(['defteam']).sum()
defensive_df.reset_index(inplace=True)
defensive_df = defensive_df.rename(columns={'yards_gained':'def_yards_gained', 'sack':'def_sack', 'interception': 'def_interception', 'defteam':'Team'})

#merging disparate dataframes into one
df_final = pd.merge(df_schedule, df_bet, on=['Team'], how='inner')
df_final = pd.merge(df_final, defensive_df, on=['Team'], how='inner')
df_final = pd.merge(df_final, offensive_df, on=['Opponent'], how='inner')

#translating season stats into per game stats
def divide_by_games(col):
  return col.div(df_final['games'])

df_final[['yards_gained','sack', 'interception', 'def_yards_gained', 'def_sack', 'def_interception']] = \
df_final[['yards_gained','sack', 'interception', 'def_yards_gained', 'def_sack', 'def_interception']].apply(divide_by_games)

#function for stats with scoring based on dictionary (points and yards)
def dict_points(expected_input, dictionary):
    #set final points to zero
    points = 0
    #iterate through scoring dictionary
    for key, value in dictionary.items():
      #iterate through values stored in scoreing dictionary
      for i in range(value[0],value[1]):
        #add the probability of a score multiplied by the fantasy points you would get
        points += (key * poisson.pmf(i, expected_input))
    return(points)

#function for stats with scoring based on set amount (sacks, ints, fumbles)
def float_points (expected_input, amount):
    #set final points to zero
    points = 0
    #iterate through range, calculate probabilities
    for i in range(0,11):
      points += (amount*poisson.pmf(i, expected_input))
    return(points)

#points dictionary
points = {
5: [0,1],
4: [1,7],
3: [7,14],
1: [14,18],
0: [18,27],
-1: [27,35],
-3: [35,46],
-5:[46,50]}

#yards dictionary
yards_dictionary = {
5: [0,100],
3: [101,199],
2: [200,299],
0: [300,349],
-1: [350,399],
-3: [400,449],
-5:[450,499],
-6:[500,549],
-7:[550,800]}

#creating new columns for functions
df['Expected Score'] = (df['o/u']+df['line'])/2
df['Expected Int'] = (df['def_int']+df['opp_int'])/2
df['Expected Sack'] = (df['def_sacks']+df['opp_sacks'])/2
df['Expected Yards'] = (df['def_yards']+df['opp_yards'])/2
df['Expected Fumbles'] = 0.65

#applying functions across the dataframe
df['points_points'] = df.apply(lambda x: dict_points(x['Expected Score'], points), axis=1)
df['yards_points'] = df.apply(lambda x: dict_points(x['Expected Yards'], yards_dictionary), axis=1)
df['sack_points'] = df.apply(lambda x: float_points(x['Expected Sack'], 1), axis=1)
df['int_points'] = df.apply(lambda x: float_points(x['Expected Int'], 2), axis=1)
df['fum_points'] = df.apply(lambda x: float_points(x['Expected Fumbles'], 2), axis=1)
df['total_points'] = df.apply(lambda x: (x['points_points']+x['yards_points']+x['sack_points']+x['int_points']+x['fum_points']), axis=1)

#giving top 10
df_final.sort_values(by=['total_points'], ascending=False, inplace=True)
df_final.head(10)

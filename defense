
#package install
%pip install nfl_data_py --upgrade

## the packages needed for this
import numpy as np
import pandas as pd
from scipy.stats import poisson
import matplotlib.pyplot as plt
import requests
import nfl_data_py as nfl


#scraping

#scraping betting data
'''
#api key and f strings to call a response from the API
api_key = 'xxxx'

response = requests.get(f" https://api.the-odds-api.com/v4/sports/americanfootball_nfl/odds/?apiKey={api_key}&regions=us&markets=spreads,totals&oddsFormat=american")

# Check the status code to make sure the request was successful
if response.status_code == 200:
  # The request was successful, so parse the response data
  data = response.json()
  print(data)
else:
  # There was an error with the request
  print("Error:", response.status_code)
'''


betting_data =[]

for i in range(0,16):
  row = []
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][1]['outcomes'][0]['point'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['point'])
  row.append('away')
  betting_data.append(row)
  row = []
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][1]['outcomes'][1]['point'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['point'])
  row.append('home')
  betting_data.append(row)

#creating dataframe
df_bet = pd.DataFrame(betting_data, columns = ['Team','O/U','Spread','Home/Away'])

#renaming teams to 3 letter abbreviation
df_bet['Team'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)

#creating df with teams/opponents
schedule = []
for i in range(0,16):
  row=[]
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][1]['name'])
  row.append(data[i]['bookmakers'][10]['markets'][0]['outcomes'][0]['name'])
  schedule.append(row)

df1 = pd.DataFrame(schedule, columns=['Team','Opponent'])
df2 = pd.DataFrame({'Team': df1['Opponent'], 'Opponent':df1['Team']})

df_schedule = pd.concat([df1, df2])
df_schedule = df_schedule.reset_index(drop=True)

#team names to abbreviations
df_schedule['Team'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)
df_schedule['Opponent'].replace({'Atlanta Falcons':'ATL', 'Baltimore Ravens':'BAL', 'Buffalo Bills':'BUF', 'Chicago Bears':'CHI', 'Carolina Panthers':'CAR', 'Detroit Lions':'DET', 'Cincinnati Bengals':'CIN', 'New England Patriots':'NE','Cleveland Browns':'CLE',\
                       'New Orleans Saints':'NO','Houston Texans':'HOU','Tennessee Titans':'TEN','Kansas City Chiefs':'KC','Seattle Seahawks':'SEA','Minnesota Vikings':'MIN','New York Giants':'NYG', 'San Francisco 49ers':'SF','Washington Commanders':'WAS',\
                       'Dallas Cowboys':'DAL','Philadelphia Eagles':'PHI','Las Vegas Raiders':'LV','Pittsburgh Steelers':'PIT','Green Bay Packers':'GB','Miami Dolphins':'MIA','Denver Broncos':'DEN','Los Angeles Rams':'LA','Arizona Cardinals':'ARI',\
                       'Tampa Bay Buccaneers':'TB','Indianapolis Colts':'IND', 'Los Angeles Chargers':'LAC','New York Jets':'NYJ','Jacksonville Jaguars':'JAX'}, inplace=True)

#scraping in season stats with nfl fast py

#data gathering, year on first line, thru week on second line
df = nfl.import_pbp_data([2022])
df = df.loc[df['week']<=15]

#filtering data columns to relevent columns for this script
df = df[['game_id','posteam','defteam','yards_gained','sack','passer','interception']]

#data munging
offensive_df = df.groupby(['game_id', 'posteam']).sum().groupby(['posteam']).sum()

#calc number of games played
count_df = df.groupby(['game_id', 'posteam']).sum().groupby(['posteam']).count()
count_df.drop(labels = ['yards_gained', 'interception'], axis=1, inplace=True)
count_df.rename(columns={'sack':'games'}, inplace=True)
column = count_df['games']
offensive_df = offensive_df.assign(games=column)

#resetting index and renaming for a merge with betting data
offensive_df.reset_index(inplace=True)
offensive_df = offensive_df.rename(columns={'posteam':'Opponent'})

#defensive data scraping and munging
defensive_df = df.groupby(['game_id', 'defteam']).sum().groupby(['defteam']).sum()
defensive_df.reset_index(inplace=True)
defensive_df = defensive_df.rename(columns={'yards_gained':'def_yards_gained', 'sack':'def_sack', 'interception': 'def_interception', 'defteam':'Team'})

#merging disparate dataframes into one
df_final = pd.merge(df_schedule, df_bet, on=['Team'], how='inner')
df_final = pd.merge(df_final, defensive_df, on=['Team'], how='inner')
df_final = pd.merge(df_final, offensive_df, on=['Opponent'], how='inner')

#translating season stats into per game stats
def divide_by_games(col):
  return col.div(df_final['games'])

df_final[['yards_gained','sack', 'interception', 'def_yards_gained', 'def_sack', 'def_interception']] = \
df_final[['yards_gained','sack', 'interception', 'def_yards_gained', 'def_sack', 'def_interception']].apply(divide_by_games)

##functions

#points, takes expected points allowed, uses a dictionary with point values allowed and corresponding fantasy points, uses a poisson distribution to get points allowed
#and converts to an expected points value

def points_points(expected_points):
    #dictionary
    points_dict = {
    5: [0,1],
    4: [1,7],
    3: [7,14],
    1: [14,18],
    0: [18,27],
    -1: [27,35],
    -3: [35,46],
    -5:[46,50]}  
    #set output to 0
    final_points_points = 0
    #iterate through scoring dictionary
    for key, value in points_dict.items():
      #iterate through values stored in scoreing dictionary
      for i in range(value[0],value[1]):
        #add the probability of a score multiplied by the fantasy points you would get
        final_points_points += (key * poisson.pmf(i, expected_points))
    return(final_points_points)

#yards
def yards_points(expected_yards):
    yards_dictionary = {
    5: [0,100],
    3: [101,199],
    2: [200,299],
    0: [300,349],
    -1: [350,399],
    -3: [400,449],
    -5:[450,499],
    -6:[500,549],
    -7:[550,800]}
    #set output to 0
    final_yards_points = 0
    #iterate through scoring dictionary
    for key, value in yards_dictionary.items():
        #iterate through values stored in scoreing dictionary
        for i in range(value[0],value[1]):
            #add the probability of a score multiplied by the fantasy points you would get
           final_yards_points += (key * poisson.pmf(i, expected_yards))
    return(final_yards_points)

#sacks
def sack_points(defensive_average, opp_offensive_average):
    final_sack_points = 0
    average_sacks = (defensive_average + opp_offensive_average)/2
    for i in range(0,11):
        final_sack_points += (i*poisson.pmf(i, average_sacks))
    return(final_sack_points)

#ints
def int_points(defensive_average, opp_qb_average):
    final_int_points = 0
    average_ints = (defensive_average + opp_qb_average)/2
    for i in range(0,7):
        final_int_points += 2*(i*poisson.pmf(i, average_ints))
    return(final_int_points)
    
## Points
df_final['Expected Score'] = (df_final['O/U']+df_final['Spread'])/2
df_final['Expected Int'] = (df_final['interception']+df_final['def_interception'])/2
df_final['Expected Sack'] = (df_final['sack']+df_final['def_sack'])/2
df_final['Expected Yards'] = (df_final['yards_gained']+df_final['def_yards_gained'])/2
df_final.head(32)

df_final['points_points'] = df_final.apply(lambda x: points_points(x['Expected Score']), axis=1)
df_final['yards_points'] = df_final.apply(lambda x: yards_points(x['Expected Yards']), axis=1)
df_final['sack_points'] = df_final.apply(lambda x: sack_points(x['sack'], x['def_sack']), axis=1)
df_final['int_points'] = df_final.apply(lambda x: int_points(x['interception'], x['def_interception']), axis=1)

df_final['total_points'] = df_final.apply(lambda x: (x['points_points']+x['yards_points']+x['sack_points']), axis=1)
df_x = df_final[['Team', 'total_points']]
df_x.sort_values(by='total_points', ascending=False, inplace=True)
df_x.head(30)

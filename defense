'''
The goal of this is to give expected points for a defense in fantasy football. I will be doing this
by simulating various elements of a game and combining the probabilities to get a final result. 
Elements listed below:

Points - scrape line and over/under, run a poisson distribution, 
convert the poisson to expected points scored and the expected points scored to FF points

Yards - scrape yds/g from offense and yd/gm from defense, normalize for home team, run a poisson distribution
convert poisson to expected points scored and expected points scores to FF points

Sacks - scrape sacks/gm offense and defense, normalize for home team, run a poisson and convert to FF points

Fumbles - assume 1/game and convert to points

Interceptions - based off of defenseive ints and QB int rate, run poisson and convert to FF points

D touchdowns - 

ST touchdowns - see ranks


'''

## the packages needed for this
import numpy as np
import pandas as pd
from scipy.stats import poisson
import matplotlib.pyplot as plt

## Points

#dictionary with fantasy points scored  as key and a list with points range to get that score

points_dict = {
    5: [0,0],
    4: [1,7],
    3: [8,14],
    1: [15,18],
    0: [19,27],
    -1: [28,35],
    -3: [35,46],
    -5:[46,50]
}


#creating a function that given a dictionary with point totals/corresponding FF point scores and an expected 
#point total from O/U and line, returns the expected value of points
def points_points(expected_points, scoring_dictionary):
    #set output to 0
    final_points_points = 0
    #iterate through scoring dictionary
    for key, value in scoring_dictionary.items():
        #iterate through values stored in scoreing dictionary
        for i in range(value[0],value[1]):
            #add the probability of a score multiplied by the fantasy points you would get
           final_points_points += (key * poisson.pmf(i, expected_points))
    return(final_points_points)
    
    
 ## Yards
 
 yards_dictionary = {
    5: [0,100],
    3: [101,199],
    2: [200,299],
    0: [300,349],
    -1: [350,399],
    -3: [400,449],
    -5:[450,499],
    -6:[500,549],
    -7:[550,800]
}

#creating a function that given a dictionary with yard totals/corresponding FF point scores and an expected 
#yards from average of opponent offense and defense, returns the expected value of points
def yards_points(expected_yards, scoring_dictionary):
    #set output to 0
    final_yards_points = 0
    #iterate through scoring dictionary
    for key, value in scoring_dictionary.items():
        #iterate through values stored in scoreing dictionary
        for i in range(value[0],value[1]):
            #add the probability of a score multiplied by the fantasy points you would get
           final_yards_points += (key * poisson.pmf(i, expected_yards))
    return(final_yards_points)
    
  ## Sacks
  def sack_points(defensive_average, opp_offensive_average):
    final_sack_points = 0
    average_sacks = (defensive_average + opp_offensive_average)/2
    for i in range(0,11):
        final_sack_points += (i*poisson.pmf(i, average_sacks))
        print(poisson.pmf(i, average_sacks))
    return(final_sack_points)
    
    #Ints
    def int_points(defensive_average, opp_qb_average):
    final_int_points = 0
    average_ints = (defensive_average + opp_qb_average)/2
    for i in range(0,7):
        final_int_points += 2*(i*poisson.pmf(i, average_ints))
        print(poisson.pmf(i, average_ints))
    return(final_int_points)
    
    #Fumbles
    def fumble_points(fumbles):
    final_fumble_points = 0
    average_fumbles = fumbles
    average_fumbles_lost = fumbles/2
    for i in range(0,7):
        final_fumble_points += 2*(i*poisson.pmf(i, average_fumbles_lost))
    return(final_fumble_points)
    
   #ST/D touch downs
   
   def d_st_td (st_td, d_td):
    final_d_td_points = 0
    final_st_td_points = 0
    for i in range(0,4):
        final_d_td_points += 6*(i*poisson.pmf(i, d_td))
    for i in range(0,4):
        final_st_td_points += 6*(i*poisson.pmf(i, st_td))
    return(final_d_td_points + final_st_td_points)

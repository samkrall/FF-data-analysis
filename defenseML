'''
create dataframe with defensive team stats by game
'''

#import modules
import pandas as pd
import numpy as np
import nfl_data_py as nfl

#import plat by play data from relevant years
year_list = []
for i in range(2001,2020):
    year_list.append(i)

#create pbp dataframe
df_pbp = nfl.import_pbp_data(years=year_list)

#filtering out penalty plays and postseason games
filt = df_pbp['penalty'] == 0
df_pbp = df_pbp[filt]
filt = df_pbp['season_type'] == 'REG'
df_pbp = df_pbp[filt]
df_pbp.shape

#aggregate and rename columns
game_stat_df = df_pbp.groupby(['game_id', 'defteam']).agg({
    'yards_gained':'sum',
    'sack':'sum',
    'interception':'sum',
    'fumble_lost':'sum',
    'safety':'sum',
    'posteam_score_post':'max' 
})

new_columns = {'yards_gained': 'yards allowed', 'fumble_lost':'fumble recovery','posteam_score_post': 'points allowed'}
game_stat_df = game_stat_df.rename(columns=new_columns)
game_stat_df.reset_index(inplace = True)


#filter for return touch down
filt = df_pbp['return_touchdown'] == 1
df_return = df_pbp[filt]

#xclude kickoffs/punts
plays_to_exclude = ['kickoff', 'punt']
df_return = df_return[~df_return['play_type'].isin(plays_to_exclude)]
df_return = df_return[['game_id','return_touchdown']]


#aggregate data and reset index
return_df = df_return.groupby('game_id').agg({
    'return_touchdown':'sum'
})

return_df.reset_index(inplace = True)


# return_df.fillna(0)

game_stat_df = pd.merge(game_stat_df, df_return, on='game_id', how='left')

game_stat_df = game_stat_df.fillna(0)

#create dicts and functions to calculate final defensive fantasy points
yards_dictionary = {
5: [0,100],
3: [101,199],
2: [200,299],
0: [300,349],
-1: [350,399],
-3: [400,449],
-5:[450,499],
-6:[500,549],
-7:[550,1500]}

points_dictionary = {
5: [0,1],
4: [1,7],
3: [7,14],
1: [14,18],
0: [18,27],
-1: [27,35],
-3: [35,46],
-5:[46,200]}
    

def calculate_yard_points(yards):
    for yard_points, point_range in yards_dictionary.items():
        if yards <= point_range[1]:
            return(int(yard_points))

def calculate_point_points(points):
    for point_points, point_range in points_dictionary.items():
        if points <= point_range[1]:
            return(int(point_points))

#calc final fantasy points
game_stat_df['fantasy points'] = game_stat_df.apply(lambda row: (calculate_yard_points(row['yards allowed']))+(calculate_point_points(row['points allowed']))+row['sack']+(row['interception']*2)+(row['fumble recovery']*2)+(row['safety']*2+(row['return_touchdown']*6)), axis=1)

df_pbp = nfl.import_pbp_data(years=[2002])

game_stat_df = df_pbp.groupby(['game_id', 'defteam', 'posteam', 'home_team', 'away_team', 'week']).agg({
    'yards_gained':'sum',
    'sack':'sum',
    'interception':'sum',
    'fumble_lost':'sum',
    'safety':'sum',
    'spread_line':'mean',
    'total_line':'mean'
    
})
game_stat_df.reset_index(inplace = True)

def extract_year(game_id):
    parts = game_id.split('_')
    return(parts[0])

game_stat_df['year'] = game_stat_df['game_id'].apply(extract_year)

dfd = game_stat_df
dfd['game'] = 1
dfd = dfd.sort_values(['defteam', 'year','week'])

# Group the DataFrame by team
grouped = dfd.groupby('defteam')

# Calculate the cumulative sum of yards for each team
dfd['aggregate_yards'] = (grouped['yards_gained'].cumsum() - dfd['yards_gained'])
dfd['total_games'] = (grouped['game'].cumsum() - dfd['game'])
dfd['ypg'] = dfd['aggregate_yards']/dfd['total_games']

dfd['aggregate_sack'] = (grouped['sack'].cumsum() - dfd['sack'])
dfd['spg'] = dfd['aggregate_sack']/dfd['total_games']

dfd['turnovers'] = dfd['fumble_lost']+dfd['interception']
dfd['aggregate_turnovers'] = (grouped['turnovers'].cumsum() - dfd['turnovers'])
dfd['tpg'] = dfd['aggregate_turnovers']/dfd['total_games']
#Reset the DataFrame index
dfd = dfd.reset_index(drop=True)

dfo = game_stat_df
dfo['game'] = 1
dfo = dfo.sort_values(['posteam', 'year','week'])

# Group the DataFrame by team
grouped = dfo.groupby('posteam')

# Calculate the cumulative sum of yards for each team
dfo['aggregate_yards'] = (grouped['yards_gained'].cumsum() - dfo['yards_gained'])
dfo['total_games'] = (grouped['game'].cumsum() - dfo['game'])
dfo['ypg_o'] = dfo['aggregate_yards']/dfo['total_games']

dfo['aggregate_sack'] = (grouped['sack'].cumsum() - dfo['sack'])
dfo['spg_o'] = dfo['aggregate_sack']/dfo['total_games']

dfo['turnovers'] = dfo['fumble_lost']+dfo['interception']
dfo['aggregate_turnovers'] = (grouped['turnovers'].cumsum() - dfo['turnovers'])
dfo['tpg_o'] = dfo['aggregate_turnovers']/dfo['total_games']
#Reset the DataFrame index
dfo = dfo.reset_index(drop=True)

dfo = dfo[['game_id', 'posteam', 'spg_o','tpg_o','ypg_o']]
df = pd.merge(dfd, dfo, on=['game_id', 'posteam'])
df.head()

#home or away
def determine_home(row):
    if row['defteam'] == row['home_team']:
        return 1
    else:
        return 0
    
df['home'] = df.apply(determine_home, axis=1)

def projected_points(row):
    if row['defteam'] == row['home_team']:
        return ((row['total_line']/2)-(row['spread_line']/2))
    else:
        return ((row['total_line']/2)+(row['spread_line']/2))
    
df['projected_points'] = df.apply(projected_points, axis=1)

game_stat_df = game_stat_df[['game_id','defteam','fantasy points']]

final_df = pd.merge(df, game_stat_df, on=['game_id', 'defteam'])
final_df.head()
